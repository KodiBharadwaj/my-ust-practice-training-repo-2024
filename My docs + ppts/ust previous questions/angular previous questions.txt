export interface Sales {
    buyerName:string
    saleTotal:number
    creditCard:boolean
   
}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { filter, map, Observable, of } from 'rxjs';
import { Sales } from './sales.interface';
import salesData from '../assets/sales.json'
 
@Injectable({
  providedIn: 'root',
})
export class ReportsService {
  // constructor(private http: HttpClient) {}
 
  getSalesData(): Observable<Sales[]> {
    return of(salesData).pipe(map((data: any) => data.sales));
  }
 
  // TODO: Implement the below function to return the total amount of sales
  calculateTotalSales(salesData: Observable<Sales[]>): Observable<number> {
    return salesData.pipe(map(sales => sales.reduce((acc, sale) => acc + sale.saleTotal, 0)));
   
  }
 
  // TODO: Implement the below function to return sum of all sales where creditCard attribute is false.
  calculateTotalCashSale(salesData: Observable<Sales[]>): Observable<number> {
    return salesData.pipe(map(sales=>sales.filter(s=>!s.creditCard).reduce((acc,saleData)=>acc+saleData.saleTotal,0)))
 
  }
 
  // TODO: Implement the below function to return sum of all sales where creditCard attribute is true.
  calculateTotalCreditSale(salesData: Observable<Sales[]>): Observable<number> {
   return salesData.pipe(map(sales=>sales.filter(s=>s.creditCard).reduce((acc,saleData)=>acc+saleData.saleTotal,0)));
  }
 
  // TODO: Implement the below function to return the buyer with the most saleTotal
  calculateBuyerWithMostSale(
    salesData: Observable<Sales[]>
  ): Observable<{ buyerName: string; saleTotal: number }> {
      return salesData.pipe(
        map(sales => {
          const buyerSales = sales.reduce((acc, sale) => {
            acc[sale.buyerName] = (acc[sale.buyerName] || 0) + sale.saleTotal;
            return acc;
          }, {} as { [key: string]: number });
 
          const mostSalesBuyer = Object.keys(buyerSales).reduce((prev, curr) => {
            return buyerSales[prev] > buyerSales[curr] ? prev : curr;
          });
 
          return { buyerName: mostSalesBuyer, saleTotal: buyerSales[mostSalesBuyer] };
        })
      );
    }
 
}
 

import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { ReportsService } from './reports.service';
import { Sales } from './sales.interface';
 
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  title = 'reports-dashboard';
 
  salesData$: Observable<Sales[]>;
 
  totalSales$: Observable<number>;
  totalCashSale$: Observable<number>;
  totalCreditSale$: Observable<number>;
  mostSalesBuyer$: Observable<{ buyerName: string; saleTotal: number }>;
  constructor(private reportsService: ReportsService) {}
 
  ngOnInit() {
    // TODO: Initialize the above defined observables here
    this.salesData$=this.reportsService.getSalesData();
    this.totalSales$=this.reportsService.calculateTotalSales(this.salesData$);
    this.totalCashSale$=this.reportsService.calculateTotalCashSale(this.salesData$);
    this.totalCreditSale$=this.reportsService.calculateTotalCreditSale(this.salesData$);
    this.mostSalesBuyer$=this.reportsService.calculateBuyerWithMostSale(this.salesData$);
 
 
  }
}
 
 
 --------------------------------------------------------------------------------------------------------



import { Player } from './player.model';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
 
@Injectable()
export class PlayerService {
  playersChanged = new Subject<Player[]>();
  count: number = 7;
  private players: Player[] = [
    new Player(1, 'M S Dhoni', 'Wicket Keeper'),
    new Player(2, 'Virat Kohli', 'Batsman'),
    new Player(3, 'Jasprit Bumrah', 'Bowler'),
    new Player(4, 'Rohit Sharma', 'Batsman'),
    new Player(5, 'Rishabh Pant', 'Wicket Keeper'),
    new Player(6, 'T. Natarajan', 'Bowler'),
    new Player(7, 'R Ashwin', 'Bowler'),
  ];
 
  getPlayers() {
    return this.players.slice();
  }
 
  generateID() {
    this.count = this.count + 1;
    return this.count;
  }
 
 
  // TODO: Should return the player by id
  getPlayer(id: number) {
    let player=this.players.find(p => p.id === id);
     return player
  }
 
  // TODO: Should add a new player
  addPlayer(player: Player) {
    this.players.push(player);
    this.playersChanged.next(this.players.slice());
  }
 
  // TODO: Should update the details of the player with the given id
  updatePlayer(index: number, newPlayer: Player) {
    let oldPlayer = this.players.findIndex(p => p.id === index);
    this.players[oldPlayer] = newPlayer;
    this.playersChanged.next(this.players.slice());
  }
 
  // TODO: Should delete the player at the given id
  deletePlayer(index: number) {
    let oldPlayerId=this.players.findIndex(p=>p.id==index);
    this.players.splice(oldPlayerId, 1);
    this.playersChanged.next(this.players.slice());
  }
}
 




 import { Player } from '../players/player.model';
import { EventEmitter } from '@angular/core';
 
export class TeamService {
  teamChanged = new EventEmitter<Player[]>();
  playerId: number;
 
  private team: Player[] = [];
 
  getTeam() {
    return this.team.slice();
  }
 
  // TODO: Should edit a player of given id to nwPlayer
  editPlayer(id: number, nwPlayer: Player) {
    let index = this.team.findIndex(p => p.id === id);
    if (index !== -1) {
      this.team[index] = nwPlayer;
      this.teamChanged.emit(this.getTeam());
    } else {
      alert("This Player doesn't exist in your team!!");
    }
  }
 
  // TODO: Should add a player to team, if the player already exist alert "This Player already exist in your team !!"
  addPlayer(player: Player) {
    if (!this.team.some(p => p.id === player.id)) {
      this.team.push(player);
      this.teamChanged.emit(this.getTeam());
    } else {
      alert("This Player already exist in your team!!");
    }
  }
 
  // TODO: Should delete a player from team
  deletePlayer(id: number) {
    let index = this.team.findIndex(p => p.id === id);
    if (index!== -1) {
      this.team.splice(index, 1);
      this.teamChanged.emit(this.getTeam());
    } else {
      alert("This Player doesn't exist in your team!!");
    }
  }
 
  // TODO: Should return an array of string conatining the status
  getStatus() {
    var status: string[] = [];
    if (this.team.filter(p => p.description === 'Batsman').length < 2) {
      status.push('You do not have required number of batsmen in your team');
    }
    if (this.team.filter(p => p.description === 'Bowler').length < 2) {
      status.push('You do not have required number of bowler in your team');
    }
    if(this.team.filter(p => p.description === 'Wicket Keeper').length < 1) {
      status.push('You do not have required number of wicket keeper in your team');
    }
    return status;
  }
}
 